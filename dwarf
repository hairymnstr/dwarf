#!/usr/bin/python
# -*- coding: utf-8 -*-
#
#    Dwarf: A PICKit 2 GUI for Linux
#    Copyright (C) 2009  Nathan Dumont (hairymnstr@gmail.com)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import pygtk
pygtk.require("2.0")
import gtk, gobject
from subprocess import Popen, PIPE
import os, sys, getopt

VERSION = "0.1"

# define the command here.
# If you want to run the pk2cmd app as sudo add sudo here
PK2CMD = "pk2cmd"

class MainWindow(gtk.Window):
  """ Main toolbar-like small window with buttons """
  def __init__(self,verbosity):
    self.verbosity = verbosity
    # setup the main window
    gtk.Window.__init__(self, type=gtk.WINDOW_TOPLEVEL)
    self.set_title("Dwarf %s" % VERSION)

    # keep track of readiness, only enable programming buttons if a file has
    # been selected and the PICKit2 is ready
    self.ready = {}
    self.ready['file'] = False
    self.ready['device'] = False

    self.set_icon_from_file("data/icon.png")
    self.connect("destroy", self.destroy_cb)
    self.layout=gtk.VBox()

    self.bar_layout = gtk.HBox()
    self.button_layout = gtk.HBox()

    # build file selector
    self.open_btn = gtk.Button(None, gtk.STOCK_OPEN)
    self.open_btn.connect("clicked", self.open_cb)
    self.bar_layout.pack_start(self.open_btn)
    self.source_file = ""

    # add a model selector
    self.model = gtk.Label()
    self.model_bg = gtk.Frame()
    self.model_bg_bg = gtk.EventBox()
    self.model_bg_bg.add(self.model_bg)
    self.model_bg_bg.modify_bg(gtk.STATE_NORMAL, 
                            gtk.gdk.Color(65535, 65535, 65535))
    self.model.set_size_request(100,-1)
    self.model.set_text("(none)")
    self.model_bg.add(self.model)
    self.bar_layout.pack_start(self.model_bg_bg)

    # assemble a set of image buttons
    # Auto-detect PIC button
    self.auto_pb = gtk.Image()
    self.auto_pb.set_from_file("data/auto.png")
    self.auto_btn = gtk.Button()
    self.auto_btn.set_image(self.auto_pb)
    self.auto_btn.connect("clicked", self.auto_cb)
    self.button_layout.pack_start(self.auto_btn)

    # Manual connect button
    #self.manual_pb = gtk.Image()
    #self.manual_pb.set_from_file("data/manual.png")
    #self.manual_btn = gtk.Button()
    #self.manual_btn.set_image(self.manual_pb)
    #self.manual_btn.connect("clicked", self.manual_cb)
    #self.button_layout.pack_start(self.manual_btn)
        
    # program
    self.program_pb = gtk.Image()
    self.program_pb.set_from_file("data/program.png")
    self.program_btn = gtk.Button()
    self.program_btn.set_image(self.program_pb)
    self.program_btn.connect("clicked", self.program_cb)
    self.program_btn.set_sensitive(False)               # disable until connect
    self.button_layout.pack_start(self.program_btn)
        
    # Read
    self.read_pb = gtk.Image()
    self.read_pb.set_from_file("data/read.png")
    self.read_btn = gtk.Button()
    self.read_btn.set_image(self.read_pb)
    self.read_btn.connect("clicked", self.read_cb)
    self.read_btn.set_sensitive(False)                  # disable until connect
    self.button_layout.pack_start(self.read_btn)
      
    # run
    self.run_pb = gtk.Image()
    self.run_pb.set_from_file("data/run.png")
    self.run_btn = gtk.Button()
    self.run_btn.set_image(self.run_pb)
    self.run_btn.connect("clicked", self.run_cb)
    self.run_btn.set_sensitive(False)                   # disable until connect
    self.button_layout.pack_start(self.run_btn)

    # stop
    self.stop_pb = gtk.Image()
    self.stop_pb.set_from_file("data/stop.png")
    self.stop_btn = gtk.Button()
    self.stop_btn.set_image(self.stop_pb)
    self.stop_btn.connect("clicked", self.stop_cb)
    self.stop_btn.set_sensitive(False)                  # disable until connect
    self.button_layout.pack_start(self.stop_btn)

    # exit
    self.exit_btn = gtk.Button(None, gtk.STOCK_QUIT)
    self.exit_btn.connect("clicked", self.destroy_cb)
    self.button_layout.pack_start(self.exit_btn)

    # set the root layout
    self.bar_layout.pack_end(self.button_layout, expand=False)
    self.layout.pack_start(self.bar_layout)
        
    # add a status label
    self.status_label = gtk.Label("Status: OK")
    self.status_bg = gtk.EventBox()
    self.status_bg.add(self.status_label)
    self.status_msg = ""    # the detailed message presented when details is
                            # clicked.

    self.status_btn = gtk.Button("Details")
    self.status_btn.set_size_request(50,-1)
    self.status_layout = gtk.HBox()
    self.status_layout.pack_start(self.status_bg)
    self.status_layout.pack_start(self.status_btn, expand=False)
    self.status_btn.set_sensitive(False)
    self.status_btn.connect("clicked", self.status_popup_cb)

    self.layout.pack_start(self.status_layout, expand=False)

    self.add(self.layout)
    self.show_all()

    # make a list of colours for the status label
    self.colours = {}
    self.colours["red"] = gtk.gdk.Color(65535,0,0)
    self.colours["green"] = gtk.gdk.Color(0,65535,0)
    self.colours["yellow"] = gtk.gdk.Color(65535,65535,0)

    # make a pickit class to control the programmer
    self.prog = PicKit(self, self.verbosity)
    self.prog.connect()

    return

  def destroy_cb(self, *kw):
    """ Destroy callback to shutdown the app """
    gtk.main_quit()
    return

  def auto_cb(self, *kw):
    """ auto-connect to the pickit and detect the attached PIC """
    self.prog.connect()
    return

  def manual_cb(self, *kw):
    """ manually connect the pickit with the selected device model """
    self.connect_pk2(False)
    return

  def open_cb(self, *kw):
    """ Opens a hex file for programming to the device. """
    self.source_select = gtk.FileChooserDialog(
                "Open File",
                self,
                gtk.FILE_CHOOSER_ACTION_OPEN,
                (gtk.STOCK_OPEN,
                 gtk.RESPONSE_ACCEPT,
                 gtk.STOCK_CANCEL,
                 gtk.RESPONSE_CANCEL))
    # set the starting folder for the open dialog
    if self.source_file == "":
      # if no file is selected yet, start in home folder
      self.source_select.set_current_folder(os.path.expanduser("~/"))
    else:
      # otherwise start in same directory as current file
      self.source_select.set_current_folder(
              os.path.split(self.source_file)[0])

    # make up filters for hex files and all files
    self.filter_hex = gtk.FileFilter()
    self.filter_hex.set_name("HEX Files")
    self.filter_hex.add_pattern("*.hex")
    self.source_select.add_filter(self.filter_hex)
    self.filter_all = gtk.FileFilter()
    self.filter_all.set_name("All Files")
    self.filter_all.add_pattern("*")
    self.source_select.add_filter(self.filter_all)
    self.source_select.set_filter(self.filter_hex)

    # connect and show the dialog
    self.source_select.connect("response", self.open_file_cb)
    self.source_select.show()
    self.set_sensitive(False)
    return
 
  def open_file_cb(self, widget, response):
    if response == gtk.RESPONSE_ACCEPT:
      # user made a choice
      self.source_file = self.source_select.get_filename()
      self.update_active('file', True)
      fname = os.path.split(self.source_file)[1]
      self.set_title("Dwarf %s: %s" % (VERSION, fname))
    self.source_select.destroy()
    del self.filter_all
    del self.filter_hex
    del self.source_select
    self.set_sensitive(True)
    return

  def program_cb(self, *kw):
    """ download the current binary file to a PIC """
    if (not self.source_file == "") and (not os.path.isfile(self.source_file)):
      self.status("Hex file not found", "", "red")
      self.action_sensitive(False)
      return
    # now do the actual programming bit
    self.prog.program(self.source_file)
    return

  def read_cb(self, *kw):
    """ Read from the device """
    # make a file select dialog popup to select where to save to
    self.save_chooser = gtk.FileChooserDialog(
              "Save HEX dump to...",            # Title 
              self,                             # Parent
              gtk.FILE_CHOOSER_ACTION_SAVE,     # Dialog mode
              (gtk.STOCK_OPEN,                  # Open button
               gtk.RESPONSE_ACCEPT,             # Returns Accept response
               gtk.STOCK_CANCEL,                # Cancel button
               gtk.RESPONSE_CANCEL))            # Returns Cancel response
    self.save_chooser.connect("response", self.read_selected_cb)
    self.save_chooser.set_do_overwrite_confirmation(True)
    self.save_chooser.show()
    self.set_sensitive(False)
    return

  def read_selected_cb(self, widget, response_id):
    if response_id in (gtk.RESPONSE_CLOSE, -4):
      self.set_sensitive(True)
      del self.save_chooser
    elif response_id == gtk.RESPONSE_CANCEL:
      self.set_sensitive(True)
      self.save_chooser.destroy()
      del self.save_chooser
    elif response_id == gtk.RESPONSE_ACCEPT:
      self.prog.read_device(widget.get_filename())
      self.save_chooser.destroy()
      del self.save_chooser
      self.set_sensitive(True)
    return

  def run_cb(self, *kw):
    """ Turn power on and MCLR off to let the project run powered by the PicKit
    """
    self.prog.run()
#pr = Popen(PK2CMD + " -P" + self.model.get_text() + " -R -T", shell=True,
#              stdout=PIPE)
#    pr.wait()
#    if self.verbosity:
#      print PK2CMD + " -P" + self.model.get_text() + " -R -T"
    return

  def stop_cb(self, *kw):
    """ Pause the PIC again with MCLR asserted and power off. """
#    pr = Popen(PK2CMD + " -P" + self.model.get_text(), shell=True,
#              stdout=PIPE)
#    pr.wait()
#    if self.verbosity:
#      print PK2CMD + " -P" + self.model.get_text()
    self.prog.stop()
    return

  def file_choose_cb(self, *kw):
    """ Update the local variable containing the filename. """
    self.source_file = self.source_select.get_filename()
    self.set_title("Dwarf %s: %s" % (VERSION,
                        os.path.split(self.source_file)[1]))
    # do status
    self.show_status("OK, selected a binary file.", "green", False)
    if self.verbosity:
      print "File chosen:", self.source_file
    return

  def status_popup_cb(self, *kw):
    """ Display a popup window with some more detailed info about the status
"""
    self.popup = Status_popup()
    self.popup.set_status_msg(self.status_msg)
    return

#  def connect_pk2(self, auto=True):


#  def show_status(self,msg,col,detail):
#    """ helper function to set the status bar message etc. """
#    self.status_label.set_text(msg)
#    self.status_bg.modify_bg(gtk.STATE_NORMAL, self.colours[col])
#    self.status_btn.set_sensitive(detail)
#    return
    
  def status(self, msg, details, colour):
    self.status_label.set_text(msg)
    self.status_bg.modify_bg(gtk.STATE_NORMAL, self.colours[colour])
    self.status_msg = details
    if details != "":
      self.status_btn.set_sensitive(True)
    else:
      self.status_btn.set_sensitive(False)

  def update_active(self, reason, value):
    self.ready[reason] = value
    act = self.ready['file'] and self.ready['device']
    self.program_btn.set_sensitive(act)
    self.read_btn.set_sensitive(act)
    self.stop_btn.set_sensitive(act)
    self.run_btn.set_sensitive(act)
    return

class Status_popup(gtk.Window):
  def __init__(self):
    gtk.Window.__init__(self)
    self.set_title("Dwarf: Status Messages")
    self.set_icon_from_file("data/icon.png")
    self.connect("destroy", self.destroy_cb)

    self.layout = gtk.VBox()
    self.text_view = gtk.Label()
    self.layout.pack_start(self.text_view)
    self.close_btn = gtk.Button("Close")
    self.close_btn.connect("clicked", self.close_btn_cb)
    self.close_layout = gtk.HBox()
    self.close_layout.pack_end(self.close_btn, expand=False)
    self.layout.pack_start(self.close_layout, expand=False)
    self.add(self.layout)
    self.show_all()
    return

  def destroy_cb(self, *kw):
    del(self)

  def close_btn_cb(self,*kw):
    self.destroy()

  def set_status_msg(self, msg):
    self.text_view.set_text(msg)
    return

class PicKit:
  def __init__(self, parent, verbosity):
    self.verbosity = verbosity
    self.cmd = PK2CMD
    self.parent = parent
    
  def set_device(self, device):
    self._device = device
    
  def get_device(self, device):
    return self._device

  def connect(self):
    opts = ["-P"]
    output = self._run_command(opts)
    
    if output.find("No PICkit 2 found.") > -1:
      # the PICKit wasn't found so de-activate the related functions
      self.device = ""
      self.parent.model.set_text("(none)")
      self.parent.status("PICKit 2 Not Found", "", "yellow", False)
      self.parent.update_active('device', False)
    elif output.find("No known part found") > -1:
      # Auto detect failed, even though PK2 is plugged into PC
      # set the model to none and disable programming
      self.device = ""
      self.parent.model.set_text("(none)")
      self.parent.status("No part found", "", "yellow")
      self.parent.update_active('device', False)
    else:
      # find the string from the description
      self.device = output[(output.find("Found part ") + 
                            len("Found part ")):(
                            output.find(".",output.find("Found part")))]
      self.parent.model.set_text(self.device)
      self.parent.status("Detected a " + self.device, "", "green")
      self.parent.update_active('device', True)

  def program(self, hexfile):
    opts = []
    opts.append("-P" + self.device)
    opts.append("-F" + hexfile)
    opts.append("-M")
    output = self._run_command(opts)
    if output.find("Program Succeeded") > -1:
      self.parent.status("Program Succeeded", output, "green")
    else:
      self.parent.status("Program Failed", output, "red")
    if self.verbosity:
      print output

  def read_device(self, hexfile):
    opts = []
    opts.append("-P" + self.device)
    opts.append("-GF" + hexfile)
    self._run_command(opts)
    return
        
  def run(self):
    opts = []
    opts.append("-P" + self.device)
    opts.append("-R")
    opts.append("-T")
    self._run_command(opts)
    return

  def stop(self):
    opts = []
    opts.append("-P" + self.device)
    self._run_command(opts)
    return

  def _run_command(self, args):
    cmd = self.cmd + " " + " ".join(args)
    if self.verbosity:
      print cmd
    pr = Popen(cmd, shell=True, stdout=PIPE)
    pr.wait()
    output = pr.stdout.read()
    return output

def usage():
  """ Usage information printed when help is requested or the command is
      wrongly used. """
  print "dwarf [options] [filename]"
  print ""
  print "Starts the Dwarf GUI application.  The optional filename is a "
  print "standard PIC hex file which will be loaded by the application "
  print "ready for programming on startup."
  print ""
  print "Options"
  print "  -v, --verbose   Prints commands sent to PK2CMD for debugging."
  print "  -h, --help      Prints this help information."
  print ""
  print """    Copyright (C) 2010  Nathan Dumont (hairymnstr@gmail.com)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>."""

  return

if __name__ == "__main__":
  try:
    optlist, args = getopt.gnu_getopt(sys.argv[1:], "vh", ["verbose", "help"])
  except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)
    
  verbosity = False
  for o, a in optlist:
    if o in ("-h", "--help"):
      usage()
      sys.exit(0)
    elif o in ("-v", "--verbose"):
      verbosity = True
  main_win = MainWindow(verbosity)

  if len(args) == 1:
    main_win.set_file(args[0])
  elif len(args) > 1:
    print "Warning, can only select one file, first argument taken."

  gtk.main()
